import requests
from bs4 import BeautifulSoup
import base64
import xml.etree.ElementTree as ET
import urllib3

# === CONFIGURATION ===
SP_URL = "https://ton-sp.example.com/"      # URL prot√©g√©e par SAML (le Service Provider)
USERNAME = "alice"                          # Identifiant Keycloak
PASSWORD = "mot_de_passe"                   # Mot de passe Keycloak
TARGET_ATTR = "username"                    # Attribut √† utiliser comme identifiant (ex: "email")

# === D√âSACTIVATION DES ALERTES SSL ===
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === SESSION HTTP ===
session = requests.Session()

print("üîê Acc√®s initial √† la ressource prot√©g√©e...")
r1 = session.get(SP_URL, verify=False)
soup1 = BeautifulSoup(r1.text, 'html.parser')

form1 = soup1.find('form')
if not form1:
    raise RuntimeError("‚ùå Aucun formulaire SAMLRequest trouv√© (√©tape 1)")

action1 = form1.get('action')
data1 = {i.get('name'): i.get('value', '') for i in form1.find_all('input') if i.get('name')}

print("‚û°Ô∏è Redirection vers l‚ÄôIdP (Keycloak)...")
r2 = session.post(action1, data=data1, verify=False)
soup2 = BeautifulSoup(r2.text, 'html.parser')

form2 = soup2.find('form')
if not form2:
    raise RuntimeError("‚ùå Aucun formulaire de login trouv√© (√©tape 2)")

login_url = form2.get('action')
login_data = {i.get('name'): i.get('value', '') for i in form2.find_all('input') if i.get('name')}
login_data['username'] = USERNAME
login_data['password'] = PASSWORD

print("üîë Envoi des identifiants √† Keycloak...")
r3 = session.post(login_url, data=login_data, verify=False)
soup3 = BeautifulSoup(r3.text, 'html.parser')

form3 = soup3.find('form')
if not form3:
    raise RuntimeError("‚ùå Aucun formulaire SAMLResponse trouv√© (√©tape 3)")

# Si Keycloak renvoie une page "Continue", on la traite
if not form3.find('input', {'name': 'SAMLResponse'}):
    print("‚è≥ Formulaire interm√©diaire d√©tect√© (probablement 'Continue')...")
    action_inter = form3.get('action')
    data_inter = {i.get('name'): i.get('value', '') for i in form3.find_all('input') if i.get('name')}
    r3b = session.post(action_inter, data=data_inter, verify=False)
    soup3 = BeautifulSoup(r3b.text, 'html.parser')
    form3 = soup3.find('form')

if not form3:
    raise RuntimeError("‚ùå Toujours aucun formulaire final avec SAMLResponse trouv√©.")

final_action = form3.get('action')
final_inputs = {
    i.get('name'): i.get('value', '') for i in form3.find_all('input') if i.get('name')
}

if 'SAMLResponse' not in final_inputs:
    print("\nüßæ Formulaire HTML re√ßu :")
    print(form3.prettify()[:2000])
    raise RuntimeError("‚ùå Champ SAMLResponse manquant. Authentification incompl√®te.")

print("\n‚úÖ Champs extraits pour POST final au SP :")
for k, v in final_inputs.items():
    print(f"{k} = {v[:80]}{'...' if len(v) > 80 else ''}")

# Envoi de la r√©ponse SAML au SP
print("üì§ Envoi de la r√©ponse SAML au SP...")
r4 = session.post(final_action, data=final_inputs, verify=False)

print("\n‚úÖ R√©ponse finale du SP :", r4.status_code)
print(r4.text[:500])

# === D√âCODAGE SAMLResponse ET EXTRACTION D'ATTRIBUTS ===
print("\nüîé D√©codage et analyse de la SAMLResponse...")

saml_xml = base64.b64decode(final_inputs['SAMLResponse'])
root = ET.fromstring(saml_xml)
ns = {'saml2': 'urn:oasis:names:tc:SAML:2.0:assertion'}

# Affiche tous les attributs
print("\nüì¶ Attributs SAML disponibles :")
for attr in root.findall('.//saml2:AttributeStatement/saml2:Attribute', ns):
    name = attr.attrib.get("Name", "(inconnu)")
    value = attr.find('saml2:AttributeValue', ns)
    if value is not None:
        print(f"- {name} = {value.text}")

# Extraction du MELLON_USER √† partir de l'attribut choisi
print("\nüë§ Extraction du MELLON_USER depuis l'attribut SAML choisi...")
found = False
for attr in root.findall('.//saml2:AttributeStatement/saml2:Attribute', ns):
    name = attr.attrib.get("Name", "")
    if name == TARGET_ATTR:
        value = attr.find('saml2:AttributeValue', ns)
        if value is not None:
            print(f"üë§ MELLON_USER (via attribut '{TARGET_ATTR}') :", value.text)
            found = True

if not found:
    print(f"‚ùå Attribut '{TARGET_ATTR}' non trouv√© dans la r√©ponse SAML.")
