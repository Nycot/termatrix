from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys

# Configure le navigateur headless
options = webdriver.ChromeOptions()
options.add_argument('--headless')
driver = webdriver.Chrome(options=options)

# Va sur le portail SSO
driver.get("https://sso.ton-entreprise.com/login")

# Remplis les champs
username_input = driver.find_element(By.NAME, "username")
password_input = driver.find_element(By.NAME, "password")

username_input.send_keys("ton_identifiant")
password_input.send_keys("ton_mot_de_passe")
password_input.send_keys(Keys.RETURN)

# Attends la redirection vers la page prot√©g√©e
driver.implicitly_wait(10)

# R√©cup√®re le cookie de session ou token
cookies = driver.get_cookies()
print(cookies)

driver.quit()


from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

# --- CONFIGURATION ---
URL_LOGIN = "https://sso.ton-entreprise.com/login"
IDENTIFIANT = "mon_identifiant"
MOT_DE_PASSE = "mon_mot_de_passe"

# --- OPTIONS CHROME ---
options = webdriver.ChromeOptions()
options.add_argument('--headless')  # Mode sans affichage
options.add_argument('--disable-gpu')
options.add_argument('--no-sandbox')
options.add_argument('--ignore-certificate-errors')  # Si certificat SSL interne
options.add_argument('--window-size=1920,1080')

# --- INITIALISATION ---
driver = webdriver.Chrome(options=options)

try:
    # Acc√®s √† la page de login
    driver.get(URL_LOGIN)

    # Attente explicite que les champs soient visibles
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "username")))

    # Remplir les champs
    username_input = driver.find_element(By.NAME, "username")
    password_input = driver.find_element(By.NAME, "password")

    username_input.send_keys(IDENTIFIANT)
    password_input.send_keys(MOT_DE_PASSE)
    password_input.send_keys(Keys.RETURN)

    # Attendre la redirection ou une page d'accueil
    WebDriverWait(driver, 15).until(EC.url_changes(URL_LOGIN))

    # Pause courte pour laisser le temps au cookie d'√™tre pos√©
    time.sleep(2)

    # R√©cup√©ration des cookies
    cookies = driver.get_cookies()
    for cookie in cookies:
        print(f"{cookie['name']} = {cookie['value']}")

    # (Optionnel) Utiliser le cookie avec requests ?
    # session = requests.Session()
    # for cookie in cookies:
    #     session.cookies.set(cookie['name'], cookie['value'])

except Exception as e:
    print(f"Erreur lors du login SSO : {e}")
finally:
    driver.quit()



import requests
from bs4 import BeautifulSoup

session = requests.Session()

# 1. Acc√®s √† la ressource prot√©g√©e sur le SP
sp_url = "https://service-protected.example.com"
response = session.get(sp_url)

# 2. Extraire le formulaire SAML de redirection vers l‚ÄôIdP
soup = BeautifulSoup(response.text, "html.parser")
form = soup.find("form")
saml_action = form["action"]
inputs = {i["name"]: i["value"] for i in form.find_all("input")}

# 3. Envoi de la requ√™te SAML vers l‚ÄôIdP
response = session.post(saml_action, data=inputs)

# 4. Simuler la soumission du formulaire d‚Äôauthentification de l‚ÄôIdP
soup = BeautifulSoup(response.text, "html.parser")
login_form = soup.find("form")
login_url = login_form["action"]
login_data = {
    i["name"]: i.get("value", "") for i in login_form.find_all("input")
}
login_data["username"] = "mon_identifiant"
login_data["password"] = "mon_mot_de_passe"

response = session.post(login_url, data=login_data)

# 5. R√©cup√©ration du formulaire SAMLResponse
soup = BeautifulSoup(response.text, "html.parser")
saml_form = soup.find("form")
saml_post_url = saml_form["action"]
saml_response_data = {
    i["name"]: i["value"] for i in saml_form.find_all("input")
}

# 6. Envoi de la r√©ponse SAML au SP
response = session.post(saml_post_url, data=saml_response_data)

# 7. Si tout est correct, tu es maintenant connect√©
print("Statut final :", response.status_code)
print("Page prot√©g√©e :", response.url)




import requests
from bs4 import BeautifulSoup

session = requests.Session()

# 1. Acc√®s initial au SP (ou ressource prot√©g√©e)
initial_url = "https://service.example.com"
r1 = session.get(initial_url)

# 2. Le SP redirige vers Keycloak avec un formulaire SAMLRequest
soup = BeautifulSoup(r1.text, 'html.parser')
form = soup.find('form')
action_url = form['action']
data = {i['name']: i['value'] for i in form.find_all('input')}

# 3. Soumission de la requ√™te SAMLRequest √† Keycloak
r2 = session.post(action_url, data=data)

# 4. Keycloak affiche le formulaire de login
soup2 = BeautifulSoup(r2.text, 'html.parser')
login_url = soup2.find('form')['action']
login_inputs = {i['name']: i.get('value', '') for i in soup2.find_all('input')}
login_inputs['username'] = "mon_utilisateur"
login_inputs['password'] = "mon_mot_de_passe"

# 5. Envoie les identifiants
r3 = session.post(login_url, data=login_inputs)

# 6. Keycloak poste la SAMLResponse vers le SP
soup3 = BeautifulSoup(r3.text, 'html.parser')
final_form = soup3.find('form')
final_action = final_form['action']
final_inputs = {i['name']: i['value'] for i in final_form.find_all('input')}

# 7. Envoie de la SAMLResponse au SP
r4 = session.post(final_action, data=final_inputs)

# 8. Tu es connect√© üéâ
print("Statut final :", r4.status_code)
print("Contenu de la page :", r4.text[:500])
