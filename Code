import requests
from bs4 import BeautifulSoup
import base64
import xml.etree.ElementTree as ET
import urllib3

# Désactiver les warnings SSL (car verify=False)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === CONFIGURATION ===
SP_URL = "https://ton-sp.example.com/"          # URL protégée par SAML (SP)
USERNAME = "alice"                              # Nom d'utilisateur Keycloak
PASSWORD = "mot_de_passe"                       # Mot de passe Keycloak

# === DÉMARRAGE ===
session = requests.Session()

print("🔐 Accès initial à la ressource protégée...")
r1 = session.get(SP_URL, verify=False)
soup1 = BeautifulSoup(r1.text, 'html.parser')

form1 = soup1.find('form')
if not form1:
    raise RuntimeError("❌ Aucun formulaire SAMLRequest trouvé (étape 1)")

action1 = form1.get('action')
data1 = {i.get('name'): i.get('value', '') for i in form1.find_all('input') if i.get('name')}

print("➡️ Redirection vers l’IdP (Keycloak)...")
r2 = session.post(action1, data=data1, verify=False)
soup2 = BeautifulSoup(r2.text, 'html.parser')

form2 = soup2.find('form')
if not form2:
    raise RuntimeError("❌ Aucun formulaire de login trouvé (étape 2)")

login_url = form2.get('action')
login_data = {i.get('name'): i.get('value', '') for i in form2.find_all('input') if i.get('name')}
login_data['username'] = USERNAME
login_data['password'] = PASSWORD

print("🔑 Envoi des identifiants à Keycloak...")
r3 = session.post(login_url, data=login_data, verify=False)
soup3 = BeautifulSoup(r3.text, 'html.parser')

form3 = soup3.find('form')
if not form3:
    raise RuntimeError("❌ Aucun formulaire SAMLResponse trouvé (étape 3)")

final_action = form3.get('action')
final_inputs = {
    i.get('name'): i.get('value', '') for i in form3.find_all('input') if i.get('name')
}

# Vérifie présence de SAMLResponse
if 'SAMLResponse' not in final_inputs:
    raise RuntimeError("❌ Champ SAMLResponse manquant. Authentification échouée.")

print("\n✅ Champs extraits pour POST vers le SP :")
for k, v in final_inputs.items():
    print(f"{k} = {v[:80]}{'...' if len(v) > 80 else ''}")

# 7. Envoi de la SAMLResponse au SP (connexion finale)
print("📤 Envoi de la réponse SAML au SP...")
r4 = session.post(final_action, data=final_inputs, verify=False)

print("\n✅ Réponse finale du SP :", r4.status_code)
print(r4.text[:500])  # Affiche début de la page protégée

# === EXTRACTION DU MELLON_USER (depuis la SAMLResponse) ===
print("\n🔎 Extraction du MELLON_USER depuis la SAMLResponse...")
saml_xml = base64.b64decode(final_inputs['SAMLResponse'])
root = ET.fromstring(saml_xml)

ns = {'saml2': 'urn:oasis:names:tc:SAML:2.0:assertion'}
nameid = root.find('.//saml2:Subject/saml2:NameID', ns)
print("👤 MELLON_USER :", nameid.text if nameid is not None else "Non trouvé")

# Optionnel : extraction des attributs SAML
print("\n📦 Attributs SAML envoyés par Keycloak :")
for attr in root.findall('.//saml2:AttributeStatement/saml2:Attribute', ns):
    attr_name = attr.attrib.get('Name', 'inconnu')
    values = [v.text for v in attr.findall('saml2:AttributeValue', ns)]
    for val in values:
        print(f"- {attr_name} = {val}")
